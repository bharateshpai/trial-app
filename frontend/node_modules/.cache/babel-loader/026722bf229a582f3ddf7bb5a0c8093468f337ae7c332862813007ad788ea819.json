{"ast":null,"code":"const API_URL = 'http://localhost:8080';\nexport const authService = {\n  async register(user) {\n    try {\n      const response = await fetch(`${API_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return {\n        error: 'Registration failed'\n      };\n    }\n  },\n  async login(user) {\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      const data = await response.json();\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      return {\n        error: 'Login failed'\n      };\n    }\n  },\n  logout() {\n    localStorage.removeItem('token');\n  },\n  getToken() {\n    return localStorage.getItem('token');\n  }\n};","map":{"version":3,"names":["API_URL","authService","register","user","response","fetch","method","headers","body","JSON","stringify","data","json","error","login","token","localStorage","setItem","logout","removeItem","getToken","getItem"],"sources":["/Users/amalapai/code/frontend/src/services/authService.ts"],"sourcesContent":["interface AuthResponse {\n  token?: string;\n  message?: string;\n  error?: string;\n}\n\ninterface User {\n  username: string;\n  password: string;\n}\n\nconst API_URL = 'http://localhost:8080';\n\nexport const authService = {\n  async register(user: User): Promise<AuthResponse> {\n    try {\n      const response = await fetch(`${API_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(user),\n      });\n      \n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return { error: 'Registration failed' };\n    }\n  },\n\n  async login(user: User): Promise<AuthResponse> {\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(user),\n      });\n      \n      const data = await response.json();\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      return { error: 'Login failed' };\n    }\n  },\n\n  logout() {\n    localStorage.removeItem('token');\n  },\n\n  getToken() {\n    return localStorage.getItem('token');\n  },\n}; "],"mappings":"AAWA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,QAAQA,CAACC,IAAU,EAAyB;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,WAAW,EAAE;QAClDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;MAC3B,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAO;QAAEA,KAAK,EAAE;MAAsB,CAAC;IACzC;EACF,CAAC;EAED,MAAMC,KAAKA,CAACX,IAAU,EAAyB;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;QAC/CM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;MAC3B,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACI,KAAK,EAAE;QACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACI,KAAK,CAAC;MAC3C;MACA,OAAOJ,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAO;QAAEA,KAAK,EAAE;MAAe,CAAC;IAClC;EACF,CAAC;EAEDK,MAAMA,CAAA,EAAG;IACPF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAEDC,QAAQA,CAAA,EAAG;IACT,OAAOJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EACtC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}