{"ast":null,"code":"export const suits = ['♠', '♣', '♥', '♦'];\nexport const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nexport const createDeck = () => {\n  const deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        faceUp: false\n      });\n    }\n  }\n  return shuffle(deck);\n};\nexport const shuffle = deck => {\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\nexport const isRed = suit => {\n  return suit === '♥' || suit === '♦';\n};\nexport const canStack = (top, bottom) => {\n  const rankOrder = ranks.indexOf(top.rank);\n  const bottomRankOrder = ranks.indexOf(bottom.rank);\n  return rankOrder === bottomRankOrder - 1 && isRed(top.suit) !== isRed(bottom.suit);\n};\nexport const canMoveToFoundation = (card, topCard) => {\n  if (!topCard) {\n    return card.rank === 'A';\n  }\n  const rankOrder = ranks.indexOf(card.rank);\n  const topRankOrder = ranks.indexOf(topCard.rank);\n  return card.suit === topCard.suit && rankOrder === topRankOrder + 1;\n};","map":{"version":3,"names":["suits","ranks","createDeck","deck","suit","rank","push","faceUp","shuffle","shuffled","i","length","j","Math","floor","random","isRed","canStack","top","bottom","rankOrder","indexOf","bottomRankOrder","canMoveToFoundation","card","topCard","topRankOrder"],"sources":["/Users/amalapai/code/frontend/src/utils/cards.ts"],"sourcesContent":["export type Suit = '♠' | '♣' | '♥' | '♦';\nexport type Rank = 'A' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K';\n\nexport interface Card {\n  suit: Suit;\n  rank: Rank;\n  faceUp: boolean;\n}\n\nexport const suits: Suit[] = ['♠', '♣', '♥', '♦'];\nexport const ranks: Rank[] = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n\nexport const createDeck = (): Card[] => {\n  const deck: Card[] = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, faceUp: false });\n    }\n  }\n  return shuffle(deck);\n};\n\nexport const shuffle = (deck: Card[]): Card[] => {\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\nexport const isRed = (suit: Suit): boolean => {\n  return suit === '♥' || suit === '♦';\n};\n\nexport const canStack = (top: Card, bottom: Card): boolean => {\n  const rankOrder = ranks.indexOf(top.rank);\n  const bottomRankOrder = ranks.indexOf(bottom.rank);\n  return rankOrder === bottomRankOrder - 1 && isRed(top.suit) !== isRed(bottom.suit);\n};\n\nexport const canMoveToFoundation = (card: Card, topCard?: Card): boolean => {\n  if (!topCard) {\n    return card.rank === 'A';\n  }\n  const rankOrder = ranks.indexOf(card.rank);\n  const topRankOrder = ranks.indexOf(topCard.rank);\n  return card.suit === topCard.suit && rankOrder === topRankOrder + 1;\n}; "],"mappings":"AASA,OAAO,MAAMA,KAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACjD,OAAO,MAAMC,KAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE/F,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAc;EACtC,MAAMC,IAAY,GAAG,EAAE;EACvB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACxB,KAAK,MAAMK,IAAI,IAAIJ,KAAK,EAAE;MACxBE,IAAI,CAACG,IAAI,CAAC;QAAEF,IAAI;QAAEC,IAAI;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC;IAC1C;EACF;EACA,OAAOC,OAAO,CAACL,IAAI,CAAC;AACtB,CAAC;AAED,OAAO,MAAMK,OAAO,GAAIL,IAAY,IAAa;EAC/C,MAAMM,QAAQ,GAAG,CAAC,GAAGN,IAAI,CAAC;EAC1B,KAAK,IAAIO,CAAC,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,QAAQ,CAACC,CAAC,CAAC,EAAED,QAAQ,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,QAAQ,CAACG,CAAC,CAAC,EAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC;EACzD;EACA,OAAOD,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMO,KAAK,GAAIZ,IAAU,IAAc;EAC5C,OAAOA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG;AACrC,CAAC;AAED,OAAO,MAAMa,QAAQ,GAAGA,CAACC,GAAS,EAAEC,MAAY,KAAc;EAC5D,MAAMC,SAAS,GAAGnB,KAAK,CAACoB,OAAO,CAACH,GAAG,CAACb,IAAI,CAAC;EACzC,MAAMiB,eAAe,GAAGrB,KAAK,CAACoB,OAAO,CAACF,MAAM,CAACd,IAAI,CAAC;EAClD,OAAOe,SAAS,KAAKE,eAAe,GAAG,CAAC,IAAIN,KAAK,CAACE,GAAG,CAACd,IAAI,CAAC,KAAKY,KAAK,CAACG,MAAM,CAACf,IAAI,CAAC;AACpF,CAAC;AAED,OAAO,MAAMmB,mBAAmB,GAAGA,CAACC,IAAU,EAAEC,OAAc,KAAc;EAC1E,IAAI,CAACA,OAAO,EAAE;IACZ,OAAOD,IAAI,CAACnB,IAAI,KAAK,GAAG;EAC1B;EACA,MAAMe,SAAS,GAAGnB,KAAK,CAACoB,OAAO,CAACG,IAAI,CAACnB,IAAI,CAAC;EAC1C,MAAMqB,YAAY,GAAGzB,KAAK,CAACoB,OAAO,CAACI,OAAO,CAACpB,IAAI,CAAC;EAChD,OAAOmB,IAAI,CAACpB,IAAI,KAAKqB,OAAO,CAACrB,IAAI,IAAIgB,SAAS,KAAKM,YAAY,GAAG,CAAC;AACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}